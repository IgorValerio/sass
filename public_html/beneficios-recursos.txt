Benefícios / Recursos do SASS	Variaveis: reaproveitamento de estilos em todo o projeto, facilidade
de manutenção. Nesting: encadeamento de seletores de css. Partials: Divisão de responsabilidades
no CSS; Mixins: especie de função, para reaproveitamento de estilo e muito mais.

Comando para gerar css minificado: sass --watch sass/css.sass:css/styles.min.css     

Seção 3: Nesting

//Nesting é a possibilidade de aninhar seletores
//Deixando mais lógica a estilização de elementos, pois segue o padrão de como o HTML está desenhado pelas tags;
//Tome cuidado com o uso escessivo de nesting pode confundir invez de ajudar.

//----Listas com nesting
//Podemos separar os elementos com virgula no nesting;
//O SASS vai entender quer queremos selecionar mais de um elemento seguindo o padrão de aninhamento;
//Tanto para os níveis superiores quanto para os níveis inferiores

//----Prioridade no SASS
O CSS é em cascata, então os de baixo tem mais prioridade que os de cima, então no caso de cima o main de baixo tem maior
//prioridade que o de cima.

//----Nesting com combinators
Os simbolos dos combinators (+,>,~) tambḿ podem ser utilizados com o nesting

ol

  > li
    color: blue

//----Parent selector
É um seletor especial que serve para se referir ao elementoexterno/elemento pai;
Utilizamos o símbolo &;
Podemos criar hovers facilmente na mesma regra, por exemplo, sem
precisar uma nova para o efeito.

a
  text-decoration: none
  color: green
  transform: .5s
  padding: 10px
  border: 1px solid green
  display: block
  width: 150px
  text-align: center

  &:hover
    background-color: green
    color

CSS:
    a:hover
    background-color: green
    color

//----Adicionando sufixo
Podemos utilizar o parent selector para adicionar sufixos também;
Desta forma criamos classes variantes e mais complexas do elemento alvo;
Por exemplo botões diferentes:
.button
    &-danger
    &-success

//----Placeholder selector
Estes seletores não criam código CSS;
Podem ser utilizados para estender alguma outra classe;
O símbolo para o Placeholder é o %;
Ou seja, quando atribuimos a um elemento um extend de um Placeholder,
estamos transferindo os estilos para este elemento;

ex: 

%base-title-style
  border-bottom: 2px dotted red
  padding: 10px
  background-color: yellow
  text-align: center

.title
  font-size: 30px
  @extend %base-title-style

.sub-title
  font-size: 25px
  @extend %base-title-style

//----Variaveis
Um recurso para salvar um valor na memoria do computador e utiliza-lo
posteriormente em qualquer lugar do codigo;
No SASS utilizamos o símbolo $ para variaveis.
Normalmente as variaveis em SASS são declaradas com um hífen;
$primary-color: #DDD;

//----Escopo
As variaveis declaradas fora de blocos podem ser acessadas em qualquer
bloco.
Já as variaveis declaradas em um bloco só podem ser acessadas pelo
bloco e seus elementos filhos;
Normalmente declaramos variaveis globais;

//----Shadowing
É um recurso que permite ter duas variavies com mesmo nome
A variavel com escopo global tem o seu valor mantido para os demais
elementos
Já a variável local tem o valor valido apenas para o seu bloco

div
  p
    //Shadowing
    $border: 3px dotted green
    border: $border
    $font-color: #FFF
    background-color: $h2-color
    color: #FFF

//----Modulos de variaveis
Podemos externalizar as variaveis em um arquivo
Então ele será responsavel pela declaração de variáveis
Adicionando uma orgnização maior ao nosso projeto
Vamos chamar o arquivo de variaveis com @import

//----Partials
Podemos criar um arquivo e invocar o mesmo em um outro arquivo de SASS
Esta técnica é chamada de partials
Por convenção os partials começam com inderline, exemplo: _button.sass
Podemos invocar um partial 

//----Mixins
São como funções, podemos definir um codigo que podera ser reutilizado
ao longo do projeto.

A sintax é: 
          @mixin nome
            regras

Podemos criar um arquivo apenas com mixins, e importar ele no projeto
principal.

@mixin special
  color: red
  background-color: yellow
  padding: 10px
  border: 1px solid red

  &:hover
    border-color: blue
    color: blue

@mixin green
  border-color: green
  color: green

.p-esp
  @include special

h2
  @include special
  @include green

//----Mixins com parâmetros

Os mixins podem receber argumentos ou parametros deixando nosso codigo
ainda mais dinamico.
Os argumentos devem ficar depois do nome e entre parênteses;
Esta é a sintax:
            @mixin calc($a, $b)

Quando eu sei que posso criar um mixin ? 
quando algum padrao de codigo se repete, ex:

  .esp-menor
    padding:10px;
    margin: 10px;

  .esp-medio
    padding:10px;
    margin: 10px;

@mixin espacamento($p, $m)
  padding: $p
  margin: $m

.esp-menor
    @include espacamento(10px, 10px)
    border: 1px solid red

  .esp-medio
    @include espacamento(15px, 15px)
    border: 1px solid blue

  .esp-maior
    @include espacamento(25px, 25px)
    border: 1px solid green

  .esp-maior-ainda
    $pad: 50px
    $mag: 50px
    @include espacamento($pad, $mag)
    border: 1px solid gold

//----Argumentos opcionais

Os mixins podem receber argumentos opcionais, ou seja, que ja tem um
valor pré-definido;
Se não passarmos um valor, ele vai utilizar o já definido;
Estes argumentos devem ficar depois dos obrigatórios;
Veja:
  @mixin opcional($a, $b: 10)

@mixin borda($style, $color, $width)
  border: 

  ============================================================

Daqui pra baixo nao foi pro anki ===========================

============================================================




  ============================================================

Daqui eu pulei pra Sessão 7 - Arquitetura mas preciso revisar
e terminar a sessão anterior   ===========================

============================================================

//---- @use 
A diretiva @use é semelhante ao @import, porem mais nova e 
performática (lançou no fim de 2019)
Também é indicada pela documentação do SASS como mais indicada 
para importar arquivos;
O @use deve ser sempre a primeira regra do arquivo.
E nos dá acesso aos módulos do SASS, que aprenderemos futuramente.

//----Arquitetura SMACSS
SMACSS é referência que vamos utilizar para arquitetar nosso SASS;
Neste padrão o CSS é dividido em partes.
Base: regras básicas de estilo, elementos gerais.
Layout: Elementos que formam a página, ex: header;
Module: Componentes menores;
State e Theme: regras que sobrepõe outras e cores do tema;
Vamos adaptar e trazer isso para realidade do SASS;

//----O arquivo principal
O arquivo principal vai apenas realizar importações, não vamos 
adicionar estilos a ele;
Podemos chamá-los de main.sass ou app.sass;
As pastas de outros módulos iniciam com números, por exemplo:
0-plugins;

//----Estrutura de pastas
Estas são as pastas que vamos criar e tambem os significados de cada
uma.
0-plugins: Frameworks ou códigos de terceiros;
1-base: Arquivos de estilo base;
2-layouts: Arquivos para elementos que formam o layout da página;
3-modules: Componentes das páginas;

//----Arquivo principal do subdiretório
O arquivo principal do subdiretório também só irá importar arquivos;
Isso vai diminuir os imports no nosso arquivo principal;
Organizando ainda mais a estrutura;
Nomenclatura para 1-base => base.sass

//----Estilos de base
Vamos agora criar alguns estilos de base;
Podemos estilizar tags como: body, a, p;
Não utilizamos classes nem ids;
A ideia é pré-estilizar elementos em arquivos separados;

//----Estilos de layouts
Vamos agora criar alguns estilos de layouts
Aqui podemos adicionar ids e classes as regras;
A ideis é estilizar Componentes maiores, como o cabeçalho da 
página (header).
Novamente podemos separar elementos em arquivos distintos

//----Estilos de modules
Vamos agora criar estilos de module
Aqui podemos adicionar ids e classes as regras
Vamos colocar nossos Componentes menores: cards, botões, algum
elemento na sidebar;
Podemos também separar cada um deles em um arquivo;